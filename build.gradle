buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
    }
}

def ENV = System.getenv()

apply plugin: 'net.minecraftforge.gradle.forge'
if (!ENV.DRONE) { // Currently incompatible (because drone can't gradle?)
    apply plugin: 'com.github.johnrengelman.shadow'
}
apply plugin: 'maven-publish'

version = "1.4.8.4"
if (ENV.DRONE_BUILD_NUMBER) {
    version += ".n" + ENV.DRONE_BUILD_NUMBER
}

repositories {
    mavenLocal()
}

group = "ivorius.reccomplex" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "RecurrentComplex"

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"
    mappings = "snapshot_20170629"
}

dependencies {
    deobfCompile 'ivorius.ivtoolkit:IvToolkit:1.3.3-1.12'
    deobfCompile 'ivorius.mcopts:MCOpts:0.9.9.4'
}

if (!ENV.DRONE) {
    shadowJar {
        exclude 'META-INF/*', 'META-INF/maven/**'
        relocate 'ivorius.mcopts', project.group + '.shadow.mcopts'
        classifier=''
    }

    reobf {
        shadowJar { mappingType = 'SEARGE' }
    }

    tasks.build.dependsOn reobfShadowJar
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar

            pom.withXml {
                asNode().appendNode('description', 'Handles structures for the game Minecraft')
                asNode().appendNode('url', 'https://github.com/Ivorforce/RecurrentComplex')
            }
            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.group != null && it.group != "unspecified"
                            && it.name != null && it.name != "unspecified") {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        if (project.hasProperty('mavenUrl')) {
            maven {
                url project."mavenUrl"
                if (project.hasProperty('mavenUser') && project.hasProperty('mavenPassword')) {
                    credentials {
                        username project."mavenUser"
                        password project."mavenPassword"
                    }
                }
            }
        } else {
            mavenLocal()
        }
    }
}
